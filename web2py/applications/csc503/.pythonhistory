request.http_host
request.
request
dir(request)
for v in request.get_vars: print v'
for v in request.get_vars: print v
for v in request.get_vars(): print v
for i in request.items: print i
for i in request.items(): print i
request.http_host
print request.http_host
request.application
request.global_settings['http_host']
request.global_settings
request.env['http_host']
request.env['http_port']
request.env['port']
request.env
request.env['port']
request.env
for e in request.env: print e
request.env['http_host']
URL('default', 'api', args=['log', simulation_id], user_signature=True)
URL('default', 'api', args=['log', 1], user_signature=True)
http_head = 'http://' + request.env['http_host']
http_head + URL('default', 'api', args=['log', 1], user_signature=True)
import requests
    from requests.auth import HTTPBasicAuth
from requests.auth import HTTPBasicAuth
simulation_id = 26
logfile = 'applications/csc503/private/temp/floating_point_add_example.log'
log_payload = {'simulation': simulation_id, 'log_content': logfile}
auth = HTTPBasicAuth('api@api.com', 'pass')
log_api_url = http://127.0.0.1:8000/csc503/default/api/log/26
log_api_url = 'http://127.0.0.1:8000/csc503/default/api/log/26'
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r
log_r()
log_payload = {'simulation': simulation_id}
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r
import logging
logging.basicConfig(level=logging.DEBUG)
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r
log_r = requests.get(url=log_api_url, data=log_payload, auth=auth)
log_r
logging
dir(logging)
logging.currentframe
logging.currentframe()
logging.log
logging.log()
logging.getLogger()
dir(logging.getLogger())
logging.log(requests.get(url=log_api_url, data=log_payload, auth=auth))
dir(logging.log)
help(logging.log)
logging.log('DEBUG',requests.get(url=log_api_url, data=log_payload, auth=auth))
logging.log(DEBUG,requests.get(url=log_api_url, data=log_payload, auth=auth))
logging.log(1,requests.get(url=log_api_url, data=log_payload, auth=auth))
l = logging.log(1,requests.get(url=log_api_url, data=log_payload, auth=auth))
l
l = logging.log(0,requests.get(url=log_api_url, data=log_payload, auth=auth))
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r.text
log_r.headers
for t in log_r.text: print t
log_r.text
log_api_url = 'http://127.0.0.1:8000/csc503/default/api/log/28'
log_payload = {'log_content': 'applications/csc503/private/temp/floating_point_add_example.log', 'simulation': 28}
auth = HTTPBasicAuth('api@api.com', 'pass')
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r
log_r.text
log_r.headers
log_api_url
log_payload
log_payload = {'simulation': 28}
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r.text
log_r = requests.get(url=log_api_url, data=log_payload, auth=auth)
log_r.text
test = requests.get(url=log_api_url,auth=auth)
test
test.text
log_api_url
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/log',auth=auth)
test
test.text
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/log')
test.text
test.headers
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/log')
print(test)
print(test.text)
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/log.json')
print(test.text)
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/log.json')
print(test.text)
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/log.json')
print(test.text)
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/log')
print(test.text)
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/log/1')
print(test.text)
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/log/1.json')
print(test.text)
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/simulation_log/1.json')
print(test.text)
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/simulation_log/1')
print(test.text)
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/simulation_log')
print(test.text)
test = requests.get(url='http://127.0.0.1:8000/csc503/default/api/simulation_log.json')
print(test.text)
log_api_url = http://127.0.0.1:8000/csc503/default/api/simulation_log/29
log_api_url = 'http://127.0.0.1:8000/csc503/default/api/simulation_log/29'
log_payload = {'log_content': 'applications/csc503/private/temp/floating_point_add_example.log', 'simulation': 29}
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r
log_r.text
log_payload = {'simulation': 29}
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r.text
log_api_url
log_r.headers
reqeust.post_vars
reqeusts.post_vars
log_r.post_vars
dir(log_r)
log_r.content
log_r.json
log_r.json()
log_r.url
log_r.request
log_r.request()
log_r.request
log_r.links
log_r.ok
log_r.raw
log_r.raw()
log_r.history
log_r.connection
log_r.json
print(log_r.json)
log_api_url
log_payload
auth
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r.text
log_payload
log_payload = {'log_simulation.simulation': 29}
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r.text
log_r = requests.post(url=log_api_url, data=log_payload)
log_r.text
log_r.headers
log_payload
log_payload = {'db.log_simulation.simulation': 29}
log_r = requests.post(url=log_api_url, data=log_payload)
log_r.text
log_payload = {'simulation': '29'}
log_r = requests.post(url=log_api_url, data=log_payload)
log_r.text
log_api_url
log_api_url = 'http://127.0.0.1:8000/csc503/default/api/simulation_log/29.json'
log_payload = {'simulation': 29}
log_r = requests.post(url=log_api_url, data=log_payload)
log_r.text
simulation_id
log_api_url = URL('default', 'api', args=['simulation_log', simulation_id], scheme=True)
log_api_url
log_api_url = 'http://127.0.0.1:8000/csc503/default/api/simulation_log'
log_payload = {'log_content': 'applications/csc503/private/temp/floating_point_add_example.log', 'simulation': 32}
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r.text
log_r.headers
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r.text
log_r = requests.post(url=log_api_url, data=log_payload)
log_r.text
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r.text
log_api_url = 'http://127.0.0.1:8000/csc503/default/api/simulation_log.json'
log_r = requests.post(url=log_api_url, data=log_payload, auth=auth)
log_r.text
log_r = requests.get(url=log_api_url, data=log_payload, auth=auth)
log_r.text
auth.user
auth_user
import auth
URL('default', 'api', scheme=True)
auth.user
from gluon import auth
import auth
exit
db
print db.executesql('SELECT input_value FROM input_data WHERE algorithm = 1')
print db.executesql('SELECT input_value FROM input_data WHERE algorithm = 1', as_dict=True)
print db.executesql('SELECT input_value FROM input_data WHERE algorithm = 1', as_dict=True).['input_value']
print db.executesql('SELECT input_value FROM input_data WHERE algorithm = 1', as_dict=True).[0]
print db.executesql('SELECT input_value FROM input_data WHERE algorithm = 1');
print db.executesql('SELECT input_value FROM input_data WHERE algorithm = 1;')
print db.executesql('SELECT id FROM input_data WHERE algorithm = 1;')
print db.executesql('SELECT id FROM input_data WHERE algorithm = 1;')[0]
print db.executesql('SELECT id FROM input_data WHERE algorithm = 1;')[0].as_list()
print db.executesql('SELECT id FROM input_data WHERE algorithm = 1;')[0].as_list
print db.executesql('SELECT id FROM input_data WHERE algorithm = 1;')[0]
print db.executesql('SELECT DISTINCT id FROM input_data WHERE algorithm = 1;')[0]
print db.executesql('SELECT DISTINCT id FROM input_data WHERE algorithm = 1;')[0][0]
print db.executesql('SELECT id FROM input_data WHERE algorithm = 1;')[0][0]
print db.executesql('SELECT id FROM input_data WHERE algorithm = 1;')[0]
print db.executesql('SELECT id FROM input_data WHERE algorithm = 1;')
list((x,y)) = db.executesql('SELECT id FROM input_data WHERE algorithm = 1;')
valid_inputs = db.executesql('SELECT id FROM input_data WHERE algorithm = 1;')
valid_inputs
for (x,y) in valid_inputs: print x
typeof(valid_inputs)
type(valid_inputs)
type(valid_inputs)[0]
for vi in valid_inputs: print type(vi)
for vi in valid_inputs: print type(vi._1)
[print x for (x,y) in valid_inputs]
print x for (x,y) in valid_inputs
for (x, y) in valid_inputs: print x
for x in valid_inputs: print x
for (x, )  in valid_inputs: print x
[(x, ) for vi in vaid_inputs]
dataset = valid_inputs
valid_inputs = [(x, ) for d in dataset]
valid_inputs
for d in dataset: print d
for (x, ) in dataset: print x
valid_inputs = [x for (x, ) in dataset]
valid_inputs
algorithm = db(db.algorithm.id==1).select(db.algorithm.Name)
algorithm
algorithm['Name']
algorithm[0]
for a in algorithm: print a
for a in algorithm: print a.as_list
for a in algorithm: print a.as_list()
algorithm
algorithm.as_list()
algorithm.as_dict()
algorithm.as_dict
algorithm
algorithm = db(db.algorithm.id==algorithm_id)
algorithm = db(db.algorithm.id==1)
algorithm
algorithm['Name']
algorithm = db(db.algorithm.id==1).Name
algorithm = db(db.algorithm.id==1).select(Name)
algorithm = db(db.algorithm.id==1).select(db.algorithm.Name)[0]
algorithm
algorithm = db(db.algorithm.id==1).select(db.algorithm.Name)
algorithm
algorithm = db(db.algorithm.id==1).select().Name
algorithm = db(db.algorithm.id==1).select()
algorithm
algorithm[0]
algorithm[0].Name
algorithm = db(db.algorithm.id==1).select()[0].Name
algorithm
