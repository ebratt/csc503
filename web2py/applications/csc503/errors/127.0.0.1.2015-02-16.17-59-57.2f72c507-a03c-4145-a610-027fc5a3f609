(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> unsupported format character ')' (0x29) at index 31"
p3
sS'layer'
p4
S'/home/ebratt/PycharmProjects/csc503/web2py/applications/csc503/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\nfrom plugin_tablescope import TableScope\nfrom plugin_solidtable import SOLIDTABLE, OrderbySelector\n\n@auth.requires_login()\ndef index():\n    # build the SOLIDTABLE\n    orderby_selector = OrderbySelector([~db.simulation.simulation_date])\n    # dataset = db(db.simulation.simulation_owner==auth.user)\n    dataset = db((db.simulation.id==db.simulation_log.simulation) &\n                 (db.simulation.id==db.simulation_time_plot.simulation) &\n                 (db.simulation.id==db.simulation_upload.simulation) &\n                 (db.simulation.simulation_owner == auth.user))\n    scope = TableScope(dataset, db.simulation.algorithm, renderstyle=True)\n    rows = scope.scoped_dataset.select(db.simulation.simulation_date,\n                                       db.simulation.algorithm,\n                                       db.simulation.input_data,\n                                       db.simulation_log.log_content,\n                                       db.simulation_time_plot.plot_content,\n                                       db.simulation_upload.upload_content,\n                                       orderby=orderby_selector.orderby())\n    headers = {\'simulation.simulation_date\': {\'selected\': True},\n               \'simulation.algorithm\': {\'selected\': False},\n               \'simulation.input_data\': {\'selected\': False}\n    }\n    extracolumns = [{\'label\': A(\'Log\', _href=\'#\'),\n                     \'content\': lambda row, rc: A(\'Download\', _href=\'download/%s\' % row.simulation_log.log_content)},\n                    {\'label\': A(\'Run-Time Plot\', _href=\'#\'),\n                     \'content\': lambda row, rc: A(\'Download\', _href=\'download/%s\' % row.simulation_time_plot.plot_content)},\n                    {\'label\': A(\'Other Upload\', _href=\'#\'),\n                     \'content\': lambda row, rc: A(\'Download\', _href=\'download/%s\' % row.simulation_upload.upload_content)},\n                    ]\n    columns = [db.simulation.simulation_date,\n               db.simulation.algorithm,\n               db.simulation.input_data,\n               extracolumns[0]]\n    table = SOLIDTABLE(rows,\n                       columns=columns,\n                       extracolumns=extracolumns,\n                       headers=headers,\n                       orderby=orderby_selector,\n                       renderstyle=True)\n    return dict(sample_1=dict(table=table, scope=scope))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\nauth.settings.allow_basic_login = True\n# @auth.requires_login()\n@auth.requires_membership(\'api\')\n# @auth.requires_signature()\n@request.restful()\ndef api():\n    response.view = \'generic.\'+request.extension\n    def GET(*args,**vars):\n        patterns = \'auto\'\n        parser = db.parse_as_rest(patterns,args,vars)\n        if parser.status == 200:\n            return dict(content=parser.response)\n        else:\n            raise HTTP(parser.status,parser.error)\n    def POST(table_name,**vars):\n        return db[table_name].validate_and_insert(**vars)\n    def PUT(table_name,record_id,**vars):\n        return db(db[table_name]._id==record_id).update(**vars)\n    def DELETE(table_name,record_id):\n        return db(db[table_name]._id==record_id).delete()\n    return dict(GET=GET, POST=POST, PUT=PUT, DELETE=DELETE)\n\n\n@auth.requires_membership("admin") # uncomment to enable security \ndef list_users():\n    btn = lambda row: A("Edit", _href=URL(\'manage_user\', args=row.auth_user.id))\n    db.auth_user.edit = Field.Virtual(btn)\n    rows = db(db.auth_user).select()\n    headers = ["ID", "Name", "Last Name", "Email", "Edit"]\n    fields = [\'id\', \'first_name\', \'last_name\', "email", "edit"]\n    table = TABLE(THEAD(TR(*[B(header) for header in headers])),\n                  TBODY(*[TR(*[TD(row[field]) for field in fields]) \\\n                        for row in rows]))\n    table["_class"] = "table table-striped table-bordered table-condensed"\n    return dict(table=table)\n\n\n@auth.requires_membership("admin") # uncomment to enable security \ndef manage_user():\n    user_id = request.args(0) or redirect(URL(\'list_users\'))\n    form = SQLFORM(db.auth_user, user_id).process()\n    membership_panel = LOAD(request.controller,\n                            \'manage_membership.html\',\n                             args=[user_id],\n                             ajax=True)\n    return dict(form=form,membership_panel=membership_panel)\n\n\n@auth.requires_membership("admin") # uncomment to enable security \ndef manage_membership():\n    user_id = request.args(0) or redirect(URL(\'list_users\'))\n    db.auth_membership.user_id.default = int(user_id)\n    db.auth_membership.user_id.writable = False\n    form = SQLFORM.grid(db.auth_membership.user_id == user_id,\n                       args=[user_id],\n                       searchable=False,\n                       deletable=False,\n                       details=False,\n                       selectable=False,\n                       csv=False,\n                       user_signature=False)\n    return form\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ebratt/PycharmProjects/csc503/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/ebratt/PycharmProjects/csc503/web2py/applications/csc503/controllers/default.py", line 146, in <module>\n  File "/home/ebratt/PycharmProjects/csc503/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ebratt/PycharmProjects/csc503/web2py/gluon/tools.py", line 3444, in f\n    return action(*a, **b)\n  File "/home/ebratt/PycharmProjects/csc503/web2py/applications/csc503/controllers/default.py", line 42, in index\n    renderstyle=True)\n  File "applications/csc503/modules/plugin_solidtable.py", line 73, in __init__\n    self.components.append(self._create_tbody(headers, col_lines))\n  File "applications/csc503/modules/plugin_solidtable.py", line 216, in _create_tbody\n    tr_inner.append(self._create_td(headers[col], col, record, rc))\n  File "applications/csc503/modules/plugin_solidtable.py", line 279, in _create_td\n    r = represent(field, r, record)\n  File "/home/ebratt/PycharmProjects/csc503/web2py/gluon/sqlhtml.py", line 65, in represent\n    return f(value)\n  File "/home/ebratt/PycharmProjects/csc503/web2py/gluon/dal/helpers/methods.py", line 268, in repr_ref\n    def repr_ref(id, row=None, r=referenced, f=ff): return f(r, id)\n  File "/home/ebratt/PycharmProjects/csc503/web2py/gluon/dal/helpers/methods.py", line 241, in ff\n    return r._format % row\nValueError: unsupported format character \')\' (0x29) at index 31\n'
p11
s.